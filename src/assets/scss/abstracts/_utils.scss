@use "sass:list";
@use "sass:meta";
@use "sass:map";


// Copied from Bulma to remove dependencies. The issue is that we can't @use parts of bulma if we're going to @use it later with params. At least I haven't found a way around those errors.
@function mergeColorMaps($bulma-colors, $custom-colors) {
    // We return at least Bulma's hard-coded colors
    $merged-colors: $bulma-colors;

    // We want a map as input
    @if meta.type-of($custom-colors) == "map" {
        @each $name, $components in $custom-colors {
            // The color name should be a string
            // and the components either a single color
            // or a colors list with at least one element
            @if meta.type-of($name) ==
        "string" and
        (
          meta.type-of($components) ==
            "list" or
            meta.type-of($components) ==
            "color"
        ) and
        list.length($components) >=
        1
            {
                $color-base: null;
                $color-invert: null;
                $color-light: null;
                $color-dark: null;
                $value: null;

                // The param can either be a single color
                // or a list of 2 colors
                @if meta.type-of($components) == "color" {
                    $color-base: $components;
                    $color-invert: bulmaFindColorInvert($color-base);
                    $color-light: bulmaFindLightColor($color-base);
                    $color-dark: bulmaFindDarkColor($color-base);
                } @else if meta.type-of($components) == "list" {
                    $color-base: list.nth($components, 1);

                    // If Invert, Light and Dark are provided
                    @if list.length($components) > 3 {
                        $color-invert: list.nth($components, 2);
                        $color-light: list.nth($components, 3);
                        $color-dark: list.nth($components, 4);

                        // If only Invert and Light are provided
                    } @else if list.length($components) > 2 {
                        $color-invert: list.nth($components, 2);
                        $color-light: list.nth($components, 3);
                        $color-dark: bulmaFindDarkColor($color-base);

                        // If only Invert is provided
                    } @else {
                        $color-invert: list.nth($components, 2);
                        $color-light: bulmaFindLightColor($color-base);
                        $color-dark: bulmaFindDarkColor($color-base);
                    }
                }

                $value: $color-base, $color-invert, $color-light, $color-dark;

                // We only want to merge the map if the color base is an actual color
                @if meta.type-of($color-base) == "color" {
                    // We merge this colors elements as map with Bulma's colors map
                    // (we can override them this way, no multiple definition for the same name)
                    // $merged-colors: map_merge($merged-colors, ($name: ($color-base, $color-invert, $color-light, $color-dark)))
                    $merged-colors: map.merge(
                            $merged-colors,
                            (
                                $name: $value,
                            )
                    );
                }
            }
        }
    }

    @return $merged-colors;
}
