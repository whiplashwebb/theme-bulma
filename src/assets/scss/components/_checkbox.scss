@use "sass:list";

@use "./../abstracts" as a;
@use "utils/functions" as fn;
@use "utils/variables" as var;
// this use might be generating duplicate code TODO : confirm or deny
@use "bulma/sass/utilities/controls" as controls;
@use "bulma/sass/utilities/css-variables" as css;

/* @docs */
$checkbox-size: 1.25em !default;
$checkbox-colors: a.$colors !default;
$checkbox-background-color: transparent !default;
$checkbox-border-color: css.getVar("grey") !default;
$checkbox-border-radius: css.getVar("radius") !default;
$checkbox-border-width: 2px !default;
$checkbox-checkmark-color: css.getVar("primary-invert") !default;
$checkbox-focus-color: hsl(from css.getVar("grey") h s l / 80%) !default;
$checkbox-active-focus-color: hsl(
    from css.getVar("checkbox-active-background-color") h s l / 80%
) !default;
$checkbox-active-background-color: css.getVar("primary") !default;
$checkbox-shadow: css.getVar("shadow");
/* @docs */

.checkbox {
    @include css.register-vars(
        (
            "checkbox-background-color": #{$checkbox-background-color},
            "checkbox-border-color": #{$checkbox-border-color},
            "checkbox-border-radius": #{$checkbox-border-radius},
            "checkbox-border-width": #{$checkbox-border-width},
            "checkbox-size": #{$checkbox-size},
            "checkbox-checkmark-color": #{$checkbox-checkmark-color},
            "checkbox-focus-color": $checkbox-focus-color,
            "checkbox-active-focus-color": $checkbox-active-focus-color,
            "checkbox-active-background-color": #{$checkbox-active-background-color},
            "checkbox-checked-background":
                url(fn.checkmark($checkbox-checkmark-color)),
            "checkbox-indeterminate-background":
                url(fn.indeterminate($checkbox-checkmark-color)),
            "checkbox-shadow": #{$checkbox-shadow},
        )
    );

    &:not(.button) {
        margin-right: 0.5em;

        & + .checkbox:last-child {
            margin-right: 0;
        }
    }

    .check {
        outline: none;
        appearance: none;
        font-size: inherit;
        width: $checkbox-size;
        height: $checkbox-size;
        flex-shrink: 0;
        border-radius: css.getVar("checkbox-border-radius");
        border: css.getVar("checkbox-border-width") solid
            css.getVar("checkbox-border-color");
        transition: background var.$speed-slow css.getVar("easing");
        background: css.getVar("checkbox-background-color");
        box-shadow: css.getVar("checkbox-shadow");

        &:checked {
            border-color: css.getVar("checkbox-active-background-color");
            background: css.getVar("checkbox-active-background-color")
                css.getVar("checkbox-checked-background") no-repeat center
                center;
        }

        &:indeterminate {
            border-color: css.getVar("checkbox-active-background-color");
            background: css.getVar("checkbox-active-background-color")
                css.getVar("checkbox-indeterminate-background") no-repeat center
                center;
        }

        &:hover:not(:disabled) {
            border-color: css.getVar("checkbox-active-background-color");
        }

        &:focus {
            &.check {
                box-shadow: css.getVar("active-shadow-size")
                    css.getVar("checkbox-focus-color");
            }

            &:checked.check {
                box-shadow: css.getVar("active-shadow-size")
                    css.getVar("checkbox-active-focus-color");
            }
        }
    }

    .control-label {
        padding-left: css.getVar("control-padding-horizontal");
    }

    &.button {
        display: flex;
    }

    &.is-disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    // sizes

    @include controls.control;

    &.is-small {
        @include controls.control-small;
    }

    &.is-medium {
        @include controls.control-medium;
    }

    &.is-large {
        @include controls.control-large;
    }

    // variant colors
    @each $name, $pair in $checkbox-colors {
        $color: list.nth($pair, 1);
        $color-invert: if(list.length($pair) >= 2, list.nth($pair, 2), null);

        &.is-#{$name} {
            @include css.register-vars(
                (
                    "checkbox-active-background-color": #{$color},
                    "checkbox-checked-background":
                        url(fn.checkmark($color-invert)),
                    "checkbox-indeterminate-background":
                        url(fn.indeterminate($color-invert)),
                    "checkbox-focus-color": #{$color},
                    "checkbox-active-focus-color": #{$color},
                )
            );
        }
    }
}
