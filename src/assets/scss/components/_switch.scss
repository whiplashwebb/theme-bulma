@use "sass:list";

@use "./../abstracts" as a;
@use "utils/functions" as fn;
@use "utils/variables" as var;
@use "bulma/sass/utilities/css-variables" as css;
@use "bulma/sass/utilities/controls" as controls;
@use "bulma/sass/utilities/mixins" as mixins;

/* @docs */
$switch-colors: a.$colors !default;
$switch-width: 2.75em !default;
$switch-padding: 0.2em !default;
$switch-background-color: css.getVar("grey-light") !default;
$switch-active-background-color: css.getVar("primary") !default;
$switch-shadow: css.getVar("shadow");
/* @docs */

.switch {
    @include css.register-vars(
        (
            "switch-width": #{$switch-width},
            "switch-padding": #{$switch-padding},
            "switch-active-background-color": #{$switch-active-background-color},
            "switch-background-color": #{$switch-background-color},
            "switch-shadow": #{$switch-shadow},
        )
    );

    @include mixins.unselectable;

    cursor: pointer;

    .check {
        display: flex;
        align-items: center;
        flex-shrink: 0;
        width: css.getVar("switch-width");
        height: calc(
            css.getVar("switch-width") * 0.5 + css.getVar("switch-padding")
        );
        padding: css.getVar("switch-padding");
        background: css.getVar("switch-background-color");
        border-radius: css.getVar("radius");
        transition:
            background var.$speed-slow css.getVar("easing"),
            box-shadow var.$speed-slow css.getVar("easing");
        box-shadow: css.getVar("switch-shadow");

        &:before {
            content: "";
            display: block;
            border-radius: css.getVar("radius");
            width: calc(
                /* stylelint-disable-next-line scss/operator-no-newline-after */
                    (
                        css.getVar("switch-width") - css.getVar(
                                "switch-padding"
                            ) * 2
                    ) / 2
            );
            height: calc(
                /* stylelint-disable-next-line scss/operator-no-newline-after */
                    (
                        css.getVar("switch-width") - css.getVar(
                                "switch-padding"
                            ) * 2
                    ) * 0.5
            );
            background: css.getVar("background");
            box-shadow:
                0 3px 1px 0 rgba(0, 0, 0, 0.05),
                0 2px 2px 0 rgba(0, 0, 0, 0.1),
                0 3px 3px 0 rgba(0, 0, 0, 0.05);
            transition: transform var.$speed-slow css.getVar("easing");
            will-change: transform;
            transform-origin: left;
        }
    }

    input[type="checkbox"] {
        position: absolute;
        left: 0;
        opacity: 0;
        outline: none;
        z-index: -1;

        &:checked + .check {
            background: css.getVar("switch-active-background-color");

            &:before {
                transform: translate3d(100%, 0, 0);
            }
        }

        &:focus,
        &:active {
            outline: none;

            + .check {
                box-shadow: css.getVar("active-shadow-size")
                    hsl(
                        from (css.getVar("switch-background-color") h s l / 80%)
                    );
            }

            &:checked + .check {
                box-shadow: css.getVar("active-shadow-size")
                    hsl(
                        from
                            (
                                css.getVar("switch-active-background-color") h s
                                    l / 80%
                            )
                    );
            }
        }
    }

    &:hover {
        .check {
            background: hsl(
                from (css.getVar("switch-background-color") h s l / 90%)
            );
        }

        input[type="checkbox"]:checked + .check {
            background: hsl(
                from (css.getVar("switch-active-background-color") h s l / 90%)
            );
        }
    }

    .check.is-rounded {
        border-radius: css.getVar("radius-rounded");

        &:before {
            border-radius: css.getVar("radius-rounded");
        }
    }

    &.has-left-label {
        flex-direction: row-reverse;

        .control-label {
            padding-right: css.getVar("control-padding-horizontal");
        }
    }

    &:not(.has-left-label) {
        .control-label {
            padding-left: css.getVar("control-padding-horizontal");
        }
    }

    &.is-disabled {
        opacity: 0.5;
        cursor: not-allowed;
        color: css.getVar("input-disabled-color");
    }

    // sizes

    @include controls.control;

    &.is-small {
        @include controls.control-small;
    }

    &.is-medium {
        @include controls.control-medium;
    }

    &.is-large {
        @include controls.control-large;
    }

    // variant colors
    @each $name, $pair in $switch-colors {
        $color: list.nth($pair, 1);

        &.is-#{$name}-passive {
            @include css.register-vars(
                (
                    "switch-background-color": #{$color},
                )
            );
        }

        &.is-#{$name} {
            @include css.register-vars(
                (
                    "switch-active-background-color": #{$color},
                )
            );
        }
    }
}
